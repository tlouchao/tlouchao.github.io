---
import NavItem from './NavItem.astro';
import ButtonSocial from './ButtonSocial.astro';
import ButtonTheme from './ButtonTheme.astro';
import ButtonNavMenu from './NavButtonMenu.astro';
import "../styles/components/navbar.scss";
---
<nav-bar>
	<nav>
		<div id="nav-left">
			<a id="nav-left-icon" href="/">
				<img src="/secretary-bird-sq.jpg" aria-label="Navbar Icon" />
			</a>
			<a id="nav-left-label" href="/">
				<span>Tiffany Chao</span>
			</a>
		</div>
		<div id="nav-right">
			<div id="nav-right-mobile" >
				<div id="nav-items">
					<NavItem href="/projects"></NavItem>
					<NavItem href="/blog"></NavItem>
					<NavItem href="/about"></NavItem>
					<NavItem href="/gallery" isToggle></NavItem>
				</div>
				<hr />
				<div class="nav-social">
					<ButtonSocial href="/" name="linkedin" />
					<ButtonSocial href="https://github.com/tlouchao" name="github" />
					<ButtonSocial href="/" name="rss" />
				</div>
			</div>
			<ButtonTheme />
			<ButtonNavMenu ariaControls="nav-right-mobile" />
		</div>
	</nav>
</nav-bar>

<script>
import { setBoolAttr, setDataAttr } from '../scripts/utils';
import { ExpandEvent } from '../scripts/stores/expand';

    class NavBar extends HTMLElement {

		navRightMobile : HTMLElement | null;
		navButtonMenu : HTMLElement | null;
        button : HTMLButtonElement | null | undefined;
		enableButtonExpand: boolean = false;
        isExpand: boolean = false;

		mql : MediaQueryList = window.matchMedia("(max-width: 600px)");

        constructor() {
            super();
			this.navRightMobile = this.querySelector('#nav-right-mobile');
            this.navButtonMenu = this.querySelector('nav-button-menu');
			this.button = this.navButtonMenu?.querySelector('button');
            
			this.button?.addEventListener('click', this.handleClick);
			this.button?.addEventListener(ExpandEvent.ENABLE, this.handleEnableExpand);
            this.button?.addEventListener(ExpandEvent.DISABLE, this.handleEnableExpand);

			this.mql.addEventListener('change', this.handleMqlChange(this.button, this.mql));

			// on page load, query the screen size
			this.mql.dispatchEvent(new Event('change'));
        }

		setExpand = (expand : boolean) => {
			this.isExpand = expand;
			if (this.button) {
				if ((this.isExpand && this.enableButtonExpand) || !this.enableButtonExpand) {
					setDataAttr(this.navButtonMenu, "expand", expand);
					this.navRightMobile?.setAttribute('style', 'display: flex;');
				} else {
					setDataAttr(this.navButtonMenu, "expand", expand);
					this.navRightMobile?.setAttribute('style', 'display: none;');
				}
			}
		}

        handleClick = () => {
            this.isExpand = !this.isExpand;
			this.setExpand(this.isExpand);
        }

		handleEnableExpand = (evt : Event) => {
			if (evt.type == ExpandEvent.ENABLE) {
            	this.enableButtonExpand = true;
			} else if (evt.type == ExpandEvent.DISABLE) {
				this.enableButtonExpand = false;
			}
			// set expand local state
			this.setExpand(false);   
		}

		// monitor the viewport size - dispatch custom event on reaching media query breakpoint
        handleMqlChange = (evtTarget : HTMLElement | null | undefined, mql : MediaQueryList) => {
            return function handleMqlChangeInner(evt : MediaQueryListEvent) {
                let newEvt : Event = (mql.matches) ? 
                                    new Event(ExpandEvent.ENABLE) : 
                                    new Event(ExpandEvent.DISABLE);
                evtTarget?.dispatchEvent(newEvt);
            }
        }
    }
    // Tell the browser to use our NavButtonMenu class for <nav-button-menu> elements.
    customElements.define('nav-bar', NavBar);
</script>