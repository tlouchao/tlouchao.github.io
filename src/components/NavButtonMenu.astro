---
import { Icon } from 'astro-icon/components'
import "../styles/components/navbuttonmenu.scss";

interface Props {
  ariaControls: string;
  isExpand?: boolean;
}

let { ariaControls, isExpand = false } = Astro.props;
const ariaLabel = "Navbar Menu Button"

---
<nav-button-menu id="nav-button-menu"
                 data-expand={isExpand}>
    <span class="sr-only">{ariaLabel}</span>
    <button aria-controls={ariaControls} 
            aria-expanded={isExpand}>
        <Icon name="menu" />
        <Icon name="close" />
    </button>
</nav-button-menu>

<style>
    #nav-button-menu {
        svg {
            margin-top: 1px;
        }
    }
</style>

<script>
    import { getDataAttr, setDataAttr, setBoolAttr, setButtonIcon } from '../scripts/utils'
    import { ExpandEventType } from '../scripts/events';

    class NavButtonMenu extends HTMLElement {
        button : HTMLButtonElement | null;
        svg0: SVGSVGElement | null;
        svg1: SVGSVGElement | null;
        navRightMobile : Element | null | undefined;

        enableButtonExpand: boolean = false;
        mql : MediaQueryList = window.matchMedia("(max-width: 600px)");

        static observedAttributes = ["data-expand"];

        constructor() {
            super();
            this.button = this.querySelector('button');
            let svgs = this.querySelectorAll('svg');
            this.svg0 = svgs[0];
            this.svg1 = svgs[1];

            let ariaControls = this.button?.getAttribute("aria-controls");
            if (ariaControls) this.navRightMobile = document.querySelector('#' + ariaControls);
        }

        connectedCallback() {

            this.button?.addEventListener('click', this.handleClick);
            this.addEventListener(ExpandEventType.ENABLE, this.handleEnableExpand);
			this.addEventListener(ExpandEventType.DISABLE, this.handleEnableExpand);
            this.mql.addEventListener('change', this.handleMqlChange(this, this.mql));

            // on page load, query the screen size
			this.mql.dispatchEvent(new Event('change'));
        }

        disconnectedCallback() {
            
            this.button?.removeEventListener('click', this.handleClick);
            this.removeEventListener(ExpandEventType.ENABLE, this.handleEnableExpand);
			this.removeEventListener(ExpandEventType.DISABLE, this.handleEnableExpand);
            this.mql.removeEventListener('change', this.handleMqlChange(this, this.mql));
        }

        attributeChangedCallback(name : string, oldValue : string | null, newValue : string | null) {
            if (name == "data-expand") {
                let expand = newValue != undefined;
                setBoolAttr(this.button, "aria-expanded", expand);
                setButtonIcon(this.button, this.svg0, this.svg1, expand)
                this.refreshNavRight(expand);
            }
        }

        refreshNavRight = (expand : boolean) => {
            // set the display state of the controlled element
            if (this.navRightMobile) {
                let navRight = this.navRightMobile;
                if (!this.enableButtonExpand || expand && this.enableButtonExpand) {
                    navRight.setAttribute('style', 'display: inherit;');
                } else {
                    navRight.setAttribute('style', 'display: none;');
                }
            }
        }

        handleClick = () => {
            let expand = getDataAttr(this, 'expand');
			setDataAttr(this, 'expand', !expand);
        }

		handleEnableExpand = (evt : Event) => {

			if (evt.type == ExpandEventType.ENABLE) {
            	this.enableButtonExpand = true;
			} else if (evt.type == ExpandEventType.DISABLE) {
				this.enableButtonExpand = false;
			}

            // attributeChangedCallback will not trigger if the previous value is the same
            let prevExpand = getDataAttr(this, 'expand');
            if (prevExpand) {
                setDataAttr(this, 'expand', false);
            } else {
                this.refreshNavRight(prevExpand);
            }
		}

		// monitor the viewport size - dispatch custom event on reaching media query breakpoint
        handleMqlChange = (evtTarget : HTMLElement, mql : MediaQueryList) => {
            return function handleMqlChangeInner(evt : MediaQueryListEvent) {
                let newEvt : Event = (mql.matches) ? 
                                     new Event(ExpandEventType.ENABLE) : 
                                     new Event(ExpandEventType.DISABLE);
                evtTarget.dispatchEvent(newEvt);
            }
        }
    }
    customElements.define('nav-button-menu', NavButtonMenu);
</script>