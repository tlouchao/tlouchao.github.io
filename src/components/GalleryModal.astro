---
import { Icon } from 'astro-icon/components'
import GalleryModalArrow from './GalleryModalArrow.astro'
import '../styles/components/gallerymodal.scss'

interface Props {
    max: number;
}

const { max } = Astro.props;
---
<gallery-modal id="gallery-modal" data-open={false} data-index={0} data-max={max}>
    <div class="gallery-modal-inner">
        <img src="" alt="" />
        <GalleryModalArrow target="prev" />
        <GalleryModalArrow target="next" />
        <button class="modal-close"><Icon name="close" /></button>
    </div>
</gallery-modal>

<script>
import { setDataAttr } from '../scripts/utils';
import { ModalEvent, ModalEventType } from '../scripts/events';

class GalleryModal extends HTMLElement {

    img : HTMLImageElement | null;
    prev : HTMLElement | null;
    next : HTMLElement | null;
    index : number = 0;
    max : number = 0;

    grid : HTMLElement | null = null;
    mql : MediaQueryList = window.matchMedia("(min-width: 1280px)");

    constructor() {
        super();
        
        this.img = this.querySelector('img');
        this.prev = this.querySelector("button[data-target='prev']");
        this.next = this.querySelector("button[data-target='next']")

        let max = this.dataset['max'];
        if (max && !Number.isNaN(parseInt(max))) {
            this.max = parseInt(max);
        }
    }

    connectedCallback() {

        this.grid = document.querySelector("#gallery-grid");

        // modal
        this.addEventListener('click', this.handleModalClick);
        this.addEventListener(ModalEventType.OPEN, this.handleModalOpenClose);
        this.addEventListener(ModalEventType.CLOSE, this.handleModalOpenClose);

        // children
        this.prev?.addEventListener('click', (evt : MouseEvent) => this.handleArrowClick(evt, this));
        this.next?.addEventListener('click', (evt : MouseEvent) => this.handleArrowClick(evt, this));
        this.img?.addEventListener('click', (evt : MouseEvent) => this.handleImgClick(evt, this));
    }

    disconnectedCallback() {

        // modal
        this.removeEventListener('click', this.handleModalClick);
        this.removeEventListener(ModalEventType.OPEN, this.handleModalOpenClose);
        this.removeEventListener(ModalEventType.CLOSE, this.handleModalOpenClose);

        // children
        this.prev?.removeEventListener('click', (evt : MouseEvent) => this.handleArrowClick(evt, this));
        this.next?.removeEventListener('click', (evt : MouseEvent) => this.handleArrowClick(evt, this));
        this.img?.removeEventListener('click', (evt : MouseEvent) => this.handleImgClick(evt, this));
    }

    handleModalClick(evt : Event) {
        let closeEvt = new ModalEvent(ModalEventType.CLOSE);
        this.dispatchEvent(closeEvt)
    }
    
    handleModalOpenClose = (evt : ModalEvent) => {
        if (evt.type == ModalEventType.OPEN) {
            if (this.img) {
                // set the index
                this.setIndex(evt.index);
                // update the image source
                let transform = 't_Wide';
                let newSrc = evt.src.replace(/t_[a-zA-Z0-9_]+/, transform);
                this.img.src = newSrc;
                this.img.alt = evt.label;
            }
            document.body.style.overflowY = 'hidden';
            setDataAttr(this, 'open', true);

        } else if (evt.type == ModalEventType.CLOSE) {  
            document.body.style.overflowY = 'visible';
            setDataAttr(this, 'open', false);
        }
    }
    
    handleArrowClick(evt : MouseEvent, host : GalleryModal) {
        if (host.mql.matches) {
            evt.stopPropagation();
            if (evt.currentTarget instanceof HTMLElement) {
                let target = evt.currentTarget.dataset.target;
                if (target) {
                    let prevCond = target == 'prev';
                    let nextCond = target == 'next';
                    host.updateIndex(prevCond, nextCond);
                }
            }
        } else {
            // this arrow should not be visible.
            // let the modal element handle the propagated click event.
        }
    }

    handleImgClick(evt : MouseEvent, host : GalleryModal) {
        evt.stopPropagation();
        let prevCond = evt.clientX < document.body.clientWidth / 2;
        let nextCond = evt.clientX >= document.body.clientWidth / 2;
        host.updateIndex(prevCond, nextCond);
    }

    setIndex(index : number) {
        this.index = index;
        this.dataset.index = this.index.toString();
    }

    updateIndex(prevCond : boolean, nextCond : boolean) {
        if (prevCond) {
            let index = this.index - 1;
            if (index < 0) index = this.max - 1;
            this.setIndex(index);
        } else if (nextCond) {
            this.setIndex((this.index + 1) % (this.max));
        }
        this.updateImageSource();
    }

    updateImageSource() {
        if (this.grid) {
            let item = this.grid.querySelector(`gallery-item[index="${this.index}"]`);
            if (item && item instanceof HTMLElement) {
                let gridImg = item.shadowRoot?.querySelector('img');
                if (gridImg && this.img) {

                    let src = gridImg.src ?? "";
                    let alt = gridImg.alt ?? "";

                    let transform = 't_Wide';
                    let newSrc = src.replace(/t_[a-zA-Z0-9_]+/, transform);
                    this.img.src = newSrc;
                    this.img.alt = alt;
                    
                }
            }
        }
    }
}

customElements.define('gallery-modal', GalleryModal);
</script>