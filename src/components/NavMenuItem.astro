---
import NavArrow from './svg/NavArrow.astro'

interface Props {
  href: string;
  isToggle?: boolean;
  isCollapsed?: boolean;
}

const { href, isToggle, isCollapsed } = Astro.props;

const { pathname } = Astro.url;
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + subpath?.[0];
const classActive = { active: isActive };

let toggle : boolean = (isToggle) ? isToggle : false;
let collapsed : boolean = (isCollapsed) ? isCollapsed : true;
let classListButton : any[] = []; 
let classListArrow : any[] = [];

if (toggle) {
    if (collapsed) {
        classListButton.push({'aria-expanded': false});
        classListArrow.push('arrow-collapse');
    } else {
        classListButton.push({'aria-expanded': true});
        classListArrow.push('arrow-expand');
    }
} 
---
<nav-menuitem class="nav-menuitem" aria-label={subpath}>
    <button class:list={classListButton}>
        
        <!-- Show arrow if toggle button is enabled -->
        {toggle ? <NavArrow class:list={classListArrow} /> : <div />}
        
        <!-- Hyperlink -->
        <a href={href} class:list={classActive}>
            <slot />
        </a>

    </button>
</nav-menuitem>

<style>
	/* Navigation Item */
    button {
        display: flex;
        width: 100%;
        height: 100%;
        padding: 0.5em;
        border: none;
        border-bottom: gray;
        background-color: black;
    }
    button:hover {
        cursor: pointer;
		background-color: var(--color-nav-item);
    }
    button:active {
        color: var(--anchor-active);
    }
	/* Anchor */
	a {
		color: var(--color-nav-link);
		text-decoration: none;
	}

	@media (min-width: 768px) {
        button {
            display: grid;
            grid-template-columns: 20px auto;
        }
        a {
		    text-align: left;
	    }
		.nav-menuitem {
			min-width: 180px;
		}
	}
</style>

<script>

    class NavMenuItem extends HTMLElement {
        constructor() {
            super();

            this.addEventListener('click', () => handleClick());
            
            const handleClick = () => {
                // forward click event to anchor tag
                let anchor = this.querySelector('a');
				anchor!.click();
            }
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-menuitem', NavMenuItem);
</script>