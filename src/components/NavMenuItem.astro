---
import NavArrow from './svg/NavArrow.astro'

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

const { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

const { pathname } = Astro.url;
const matches = pathname.match(/[^\/]+/g);
const subpath = matches ? matches?.[0] : '';
// const isActive = href === pathname || href === '/' + subpath;
---
<nav-menuitem class="nav-menuitem" data-toggle={isToggle} data-expand={isExpand}>
    <button aria-label={label} aria-expanded={isExpand}>
        
        <!-- Show arrow if toggle button is enabled -->
        {isToggle ? <NavArrow /> : <div />}
        
        <!-- Hyperlink -->
        <a href={href}>
            <slot />
        </a>

    </button>
</nav-menuitem>

<style>
	/* Navigation Item */
    button {
        display: flex;
        width: 100%;
        height: 100%;
        padding: 0.5em;
        border: none;
        border-bottom: gray;
        background-color: black;
    }
    button:hover {
        cursor: pointer;
		background-color: var(--color-nav-item);
    }
    button:active {
        color: var(--anchor-active);
    }
	/* Anchor */
	a {
		color: var(--color-nav-link);
		text-decoration: none;
	}

	@media (min-width: 768px) {
        button {
            display: grid;
            grid-template-columns: 20px auto;
        }
        a {
		    text-align: left;
	    }
		.nav-menuitem {
			min-width: 180px;
		}
	}
</style>

<script>
import Utils from "../scripts/utils";

    class NavMenuItem extends HTMLElement {
        constructor() {
            super();
            
            const button = this.querySelector('button');
            const svg = this.querySelector('svg')
            const anchor = this.querySelector('a');
            
            const handleClick = (evt : MouseEvent) => {
                if (Utils.getDataAttr(this, "toggle")) {

                    // prevent href navigation / refresh
                    evt.preventDefault();

                    // get and invert the attribute
                    let isExpand = Utils.getDataAttr(this, "expand");
                    isExpand = !isExpand;

                    // set the attribute
                    Utils.setDataAttr(this, "expand", isExpand);
                    Utils.setDataAttr(svg!, "expand", isExpand);
                    Utils.setAriaAttr(button!, "aria-expanded", isExpand);

                } else {
                    // forward click event to anchor tag
				    anchor?.click();
                }
            }

            button!.addEventListener('click', (evt : MouseEvent) => handleClick(evt));
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-menuitem', NavMenuItem);
</script>