---
import NavArrow from './svg/NavArrow.astro'

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

const { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

// get routes under href; workaround for Astro.glob string literal
const files = await Astro.glob("../pages/**/*.astro");
const ffiles = files.filter(file => file.url?.includes(href));

const { pathname } = Astro.url;
const matches = pathname.match(/[^\/]+/g);
const subpath = matches ? matches?.[0] : '';

const isCurrent = href === pathname || href === '/' + subpath;
---
<nav-item data-toggle={isToggle} 
          data-expand={isExpand}>
    <button aria-label={label} 
            aria-expanded={isExpand} 
            aria-current={isCurrent} 
            aria-controls="">
        <NavArrow isToggle={isToggle} />
        <a href={href}>
            <slot />
        </a>
    </button>
    <!--
    {ffiles.map((component) => (
        <div>
          {component.url}
        </div>
      ))}
    -->
    <div class="sub-items">
        <div>
            <p>Sub item</p>
        </div>
    </div>
</nav-item>

<style>
	/* Navigation Item */
    nav-item {
        display: flex;
        flex-direction: column;
    }
    button {
        display: flex;
        width: 100%;
        height: 100%;
        padding: 0.5em;
        border: none;
        border-bottom: gray;
        background-color: var(--color-nav-item);
    }
    button:hover {
        cursor: pointer;
		background-color: var(--color-nav-item-hover);
    }
    button:active {
        color: var(--anchor-active);
    }
	button a {
		color: var(--color-nav-link);
		text-decoration: none;
	}
    button + div {
        display: none;
        visibility: hidden;
    }
    button[aria-expanded="true"] + div {
        display: block;
        visibility: visible;
    }

	@media (min-width: 768px) {
        nav-item {
            min-width: 180px;
        }
        button {
            display: grid;
            grid-template-columns: 20px auto;
        }
        button a {
		    text-align: left;
	    }
	}
</style>

<script>
import Utils from "../scripts/utils";

    class NavItem extends HTMLElement {
        constructor() {
            super();

            let href = "/gallery";
          
            const button = this.querySelector('button');
            const svg = this.querySelector('svg')
            const anchor = this.querySelector('a');
            
            const handleClick = (evt : MouseEvent) => {
                if (Utils.getDataAttr(this, "toggle")) {

                    // prevent href navigation / refresh
                    evt.preventDefault();

                    // get and invert the attribute
                    let isExpand = Utils.getDataAttr(this, "expand");
                    isExpand = !isExpand;

                    // set the attribute
                    Utils.setDataAttr(this, "expand", isExpand);
                    Utils.setDataAttr(svg!, "expand", isExpand);
                    Utils.setBoolAttr(button!, "aria-expanded", isExpand);

                } else {
                    // forward click event to anchor tag
				    anchor?.click();
                }
            }

            button!.addEventListener('click', (evt : MouseEvent) => handleClick(evt));
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>