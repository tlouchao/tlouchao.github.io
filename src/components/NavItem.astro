---
import { Icon } from 'astro-icon/components'
import { getLabel } from '../scripts/utils';
import '../styles/components/navitem.scss'

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

let { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

// Create capitalized label
if (label == undefined) {
    label = (href == "/") ? "Projects" : getLabel(href);
}

const { pathname } = Astro.url;
const isCurrent = href === pathname;
const ariaControls = label.toLowerCase() + '-items';

// get routes under href; workaround for Astro.glob string literal
let files = await Astro.glob("../**/index.astro");
let ffiles = files.filter(file => file.url?.includes(href));

let subitems = ffiles.map(file => (
    
    {href: file.url, 
     label: getLabel(file.url),
     isCurrent: file.url === pathname,
    }
));
---
<nav-item data-toggle={isToggle} 
          data-expand={isToggle ? isExpand : undefined}>
    <button aria-controls={isToggle ? ariaControls : undefined} 
            aria-expanded={isToggle ? isExpand : undefined} 
            aria-label={label} 
            aria-current={isCurrent}>
        <Icon name="arrow" />
        <a href={href}>
            {label}
        </a>
    </button>
    {isToggle &&
    <div class="sub-items" id={ariaControls}>
        {subitems.map(s => (
            <nav-item>
                <button aria-label={s.label}
                        aria-current={s.isCurrent}>
                    <Icon name="arrow" />
                    <a href={s.href}>
                        {s.label}
                    </a>
                </button>
            </nav-item>
            ))
        }
    </div>
    }
</nav-item>

<script>
import { getDataAttr, setDataAttr, setBoolAttr } from '../scripts/utils';
import { $expand, ExpandEvent } from '../scripts/stores/expand';

    class NavItem extends HTMLElement {

        button : HTMLButtonElement | null;
        anchor : HTMLAnchorElement | null;
        label : string | undefined;
        mql : MediaQueryList = window.matchMedia("(min-width: 600px) and (max-width: 768px)");

        // mobile only
        subitems : HTMLElement | null = null;
        enableAutoExpand: boolean = true;

        constructor() {
            super();
            this.button = this.querySelector('button');
            this.anchor = this.querySelector('a');
            this.label = this.button?.getAttribute('aria-label')?.toLowerCase();

            if (this.button) {

                // get last expand state
                if (!this.enableAutoExpand) {
                    let label = this.label ?? '';
                    let expand = $expand.get()[label];
                    this.setExpand(expand);
                }
                
                // any button
                this.button.addEventListener('click', this.handleClick);

                // event listeners for the toggle button
                if (getDataAttr(this, "toggle")) {

                    this.button.addEventListener(ExpandEvent.ENABLE, this.handleAutoExpand);
                    this.button.addEventListener(ExpandEvent.DISABLE, this.handleAutoExpand);
                    this.button.addEventListener('mouseenter', this.handleEnterLeave);
                    this.button.addEventListener('mouseleave', this.handleEnterLeave);
                    this.button.addEventListener('focus', this.handleEnterLeave);
                    this.button.addEventListener('blur', this.handleEnterLeave);

                    // event listeners for sub items
                    this.subitems = this.querySelector('.sub-items');
                    this.subitems?.addEventListener('mouseleave', this.handleEnterLeave);
                    this.subitems?.addEventListener('blur', this.handleEnterLeave);

                    this.mql.addEventListener('change', this.handleMqlChange(this.button, this.mql));

                    // on page load, query the screen size
                    this.mql.dispatchEvent(new Event('change'));
                }
            }
        }

        setExpand = (expand : boolean) => {
            if (this.dataset["toggle"] != undefined) {
                setDataAttr(this, "expand", expand);
                setBoolAttr(this.button, "aria-expanded", expand);
            }
        }

        handleClick = (evt : MouseEvent) => {

            if (getDataAttr(this, "toggle")) {

                // prevent href navigation / refresh
                evt.preventDefault();

                // get and invert
                let label = this.label ?? '';
                let expand = !$expand.get()[label];
                $expand.setKey(label, expand);

                // set attribute on elements
                this.setExpand(expand);

            } else {              
                // forward click event to anchor tag
                this.anchor?.click();
            }
        }

        handleAutoExpand = (evt : Event) => {

            if (getDataAttr(this, "toggle")) {
                
                // ignore nanostores, expand local state will not persist 
                if (evt.type == ExpandEvent.ENABLE) {
                    this.enableAutoExpand = true;

                    // set expand local state
                    this.setExpand(false);    

                } else if (evt.type == ExpandEvent.DISABLE) {
                    this.enableAutoExpand = false;

                    // set expand
                    let label = this.label ?? '';
                    let expand = $expand.get()[label];
                    this.setExpand(expand);

                }
            } // else do nothing
        }

        handleEnterLeave = (evt : Event | MouseEvent) => {

            if (this.enableAutoExpand) {

                if (evt.type == 'mouseenter' || evt.type == 'focus') {
                    this.setExpand(true);

                } else if (evt.type == 'mouseleave' || evt.type == 'blur') {

                    // do nothing if the cursor is still hovering over items
                    if (evt instanceof MouseEvent && evt.relatedTarget instanceof Element) {
                        if (!(this.subitems?.contains(evt.relatedTarget))) {
                            this.setExpand(false);
                        }
                    }
                }
            }
        }

        // monitor the viewport size - dispatch custom event on reaching media query breakpoint
        handleMqlChange = (evtTarget : HTMLElement, mql : MediaQueryList) => {
            return function handleMqlChangeInner(evt : MediaQueryListEvent) {
                let newEvt : Event = (mql.matches) ? 
                                    new Event(ExpandEvent.ENABLE) : 
                                    new Event(ExpandEvent.DISABLE);
                evtTarget.dispatchEvent(newEvt);
            }
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>