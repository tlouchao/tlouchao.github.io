---
import { Icon } from 'astro-icon/components'
import { getLabel as uGetLabel } from '../scripts/utils';
import '../styles/components/navitem.scss'

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

let { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

// Create capitalized label
if (label == undefined) {
    label = (href == "/") ? "Home" : uGetLabel(href);
}

const { pathname } = Astro.url;
const isCurrent = href === pathname;
const ariaControls = label.toLowerCase() + '-items';

// get routes under href; workaround for Astro.glob string literal
let files = await Astro.glob("../pages/**/*.astro");
let ffiles = files.filter(file => file.url?.includes(href));

let subitems = ffiles.map(file => (
    {href: file.url, 
     label: uGetLabel(file.url),
     isCurrent: file.url === pathname,
    }
));
---
<nav-item data-toggle={isToggle} 
          data-expand={isToggle ? isExpand : undefined}>
    <button role={isToggle ? "button" : undefined}
            aria-controls={isToggle ? ariaControls : undefined} 
            aria-expanded={isToggle ? isExpand : undefined} 
            aria-label={label} 
            aria-current={isCurrent}>
        <Icon name="arrow" />
        <a href={href}>
            {label}
        </a>
    </button>
    {isToggle &&
        <div class="sub-items" id={ariaControls}>
            {subitems.map(s => (
                <nav-item>
                    <button aria-label={s.label}
                            aria-current={s.isCurrent}>
                        <Icon name="arrow" />
                        <a href={s.href}>
                            {s.label}
                        </a>
                    </button>
                </nav-item>
                ))
            }
        </div>
    }
</nav-item>

<script>
import Utils from '../scripts/utils';
import { $expand } from '../scripts/stores/expand';

    class NavItem extends HTMLElement {

        button : HTMLButtonElement | null;
        anchor : HTMLAnchorElement | null;
        label : string | undefined;

        constructor() {
            super();
            this.button = this.querySelector('button');
            this.anchor = this.querySelector('a');
            this.label = this.button?.getAttribute("aria-label")?.toLowerCase();

            if (this.label) {
                let expand = $expand.get()[this.label];
                this.setExpand(expand);
            }

            this.button?.addEventListener('click', evt => this.handleClick(evt));
        }
        
        handleClick = (evt : MouseEvent) => {

            if (Utils.getDataAttr(this, "toggle")) {

                // prevent href navigation / refresh
                evt.preventDefault();

                // get and invert
                if (this.label) {
                    let expand = !$expand.get()[this.label];
                    $expand.setKey(this.label, expand);

                    // set attribute on elements
                    this.setExpand(expand);
                }

            } else {              
                // forward click event to anchor tag
                this.anchor?.click();
            }
        }

        setExpand = (expand : boolean) => {
            if (this.dataset["toggle"] != undefined) {
                Utils.setDataAttr(this, "expand", expand);
                Utils.setBoolAttr(this.button, "aria-expanded", expand);
            }
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>