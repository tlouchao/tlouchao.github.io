---
import { Icon } from 'astro-icon/components'
import { getLabel as uGetLabel } from "../scripts/utils";

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

let { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

// Create capitalized label
if (label == undefined) {
    label = (href == "/") ? "Home" : uGetLabel(href);
}

const { pathname } = Astro.url;
const isCurrent = href === pathname;
const ariaControls = label.toLowerCase() + '-items';

// get routes under href; workaround for Astro.glob string literal
let files = await Astro.glob("../pages/**/*.astro");
let ffiles = files.filter(file => file.url?.includes(href));
let subitems = ffiles.map(file => (
    {href: file.url, 
     label: uGetLabel(file.url),
     isCurrent: file.url === pathname,
    }
));

---
<nav-item data-toggle={isToggle} 
          data-expand={isToggle ? isExpand : undefined}>
    <button role={isToggle ? "button" : undefined}
            aria-controls={isToggle ? ariaControls : undefined} 
            aria-expanded={isToggle ? isExpand : undefined} 
            aria-label={label} 
            aria-current={isCurrent}>
        <Icon name="arrow" />
        <a href={href}>
            {label}
        </a>
    </button>
    {isToggle &&
        <div class="sub-items" id={ariaControls}>
            {subitems.map(s => (
                <nav-item>
                    <button aria-label={s.label}
                            aria-current={s.isCurrent}>
                        <Icon name="arrow" />
                        <a href={s.href}>
                            {s.label}
                        </a>
                    </button>
                </nav-item>
                ))
            }
        </div>
    }
</nav-item>

<style>
	/* Navigation Item */
    nav-item {
        display: flex;
        flex-direction: column;
    }
    [data-icon="arrow"] {
        display: none;
    }
    button[aria-current="true"] {
        font-weight: bold;
        color: var(--color-nav-link-current);
        background-color: var(--color-nav-item-current);
    }
    button {
        display: flex;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 0.35em;
        color: var(--color-nav-link);
        background-color: var(--color-nav-item);
    }
    button:hover {
        cursor: pointer;
        color: var(--color-nav-link-hover);
		background-color: var(--color-nav-item-hover);
    }
    button:active {
        color: var(--color-nav-link-active);
        background-color: var(--color-nav-item-active);
    }
	button a {
		color: inherit;
		text-decoration: none;
	}
    .sub-items {
        display: none;
        visibility: hidden;
    }
    
    button[aria-expanded="true"] + .sub-items {
        display: block;
        visibility: visible;
    }

    .sub-items button[aria-current="true"] {
        font-weight: bold;
        color: var(--color-nav-link-current);
        background-color: var(--color-nav-item-current);
    }
    .sub-items button a {
        color: var(--color-nav-sub-link);
        font-weight: lighter;
    }
    .sub-items button:hover > a {
        color: inherit;
    }
    .sub-items button:active > a {
        color: inherit;
    }
	@media (min-width: 768px) {
        nav-item {
            width: 100%;
        }
        [data-icon="arrow"] {
            display: inherit;
			visibility: hidden;
			color: inherit;
        }
        nav-item[data-toggle] > button > [data-icon="arrow"] {
            visibility: visible;
            transform: rotate(90deg);
        }
        nav-item[data-toggle][data-expand] > button > [data-icon="arrow"] {
            visibility: visible;
            transform: rotate(180deg);
        }
        button {
            display: grid;
            height: auto;
            grid-template-columns: 20px auto;
            border-bottom: 1px solid var(--color-nav);
        }
        button a {
		    text-align: left;
	    }  
        .sub-items button {
            grid-template-columns: 36px auto;
        }
	}
</style>

<script>
import Utils from "../scripts/utils";
import { $expand } from '../scripts/stores/expand.js'

    class NavItem extends HTMLElement {

        button : HTMLButtonElement | null;
        anchor : HTMLAnchorElement | null;

        constructor() {
            super();
            this.button = this.querySelector('button');
            this.anchor = this.querySelector('a');

            let expand = $expand.get()["gallery"];
            this.setExpand(expand);

            this.button?.addEventListener('click', evt => this.handleClick(evt));
        }
        
        handleClick = (evt : MouseEvent) => {

            if (Utils.getDataAttr(this, "toggle")) {

                // prevent href navigation / refresh
                evt.preventDefault();

                // get and invert
                let key = this.button?.getAttribute("aria-label")?.toLowerCase();
                if (key) {
                    let expand = !$expand.get()[key];
                    $expand.setKey(key, expand);

                    // set attribute on elements
                    this.setExpand(expand);
                }

            } else {              
                // forward click event to anchor tag
                this.anchor?.click();
            }
        }

        setExpand = (expand : boolean) => {
            if (this.dataset["toggle"] != undefined) {
                Utils.setDataAttr(this, "expand", expand);
                Utils.setBoolAttr(this.button, "aria-expanded", expand);
            }
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>