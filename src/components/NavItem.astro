---
import { Debug } from 'astro:components';
import NavArrow from './svg/NavArrow.astro'

interface Props {
  href: string;
  label?: string;
  isToggle?: boolean;
  isExpand?: boolean;
}

let { href, label = undefined, isToggle = false, isExpand = false } = Astro.props;

// Helper function to capitalize button labels
const getLabel = function(href: string | undefined) : string {
    let ret = href?.split('/').pop();
    ret = (ret == undefined) ? '' : ret;
    ret = ret.charAt(0).toUpperCase() + ret.slice(1);
    return ret;
}

// Create capitalized label
if (label == undefined) {
    label = getLabel(href);
} else if (label == '/') {
    label = "Home";
}

// get routes under href; workaround for Astro.glob string literal
let files = await Astro.glob("../pages/**/*.astro");
let ffiles = files.filter(file => file.url?.includes(href));
let subitems = ffiles.map(file => ({href: file.url, label: getLabel(file.url)}));

const { pathname } = Astro.url;
const matches = pathname.match(/[^\/]+/g);
const subpath = matches ? matches?.[0] : '';
const isCurrent = href === pathname || href === '/' + subpath;
---
<nav-item data-toggle={isToggle} 
          data-expand={isExpand}>
    <button aria-label={label} 
            aria-expanded={isExpand} 
            aria-current={isCurrent} 
            aria-controls="">
        <NavArrow isToggle={isToggle} />
        <a href={href}>
            {label}
        </a>
    </button>
    {isToggle &&
        <div class="sub-item">
            {subitems.map((s) => (
                <nav-item>
                    <button>
                        <NavArrow />
                        <a href={s.href}>
                            {s.label}
                        </a>
                    </button>
                </nav-item>
            ))}
        </div>
    }
</nav-item>

<style>
	/* Navigation Item */
    nav-item {
        display: flex;
        flex-direction: column;
    }
    button[aria-current="true"] {
        font-weight: bold;
        color: var(--color-nav-link-current);
        background-color: var(--color-nav-item-current);
    }
    button {
        display: flex;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 0.35em;
        color: var(--color-nav-link);
        background-color: var(--color-nav-item);
    }
    button:hover {
        cursor: pointer;
        color: var(--color-nav-link-hover);
		background-color: var(--color-nav-item-hover);
    }
    button:active {
        color: var(--color-nav-link-active);
        background-color: var(--color-nav-item-active);
    }
	button a {
		color: inherit;
		text-decoration: none;
	}
    button + div {
        display: none;
        visibility: hidden;
    }
    button[aria-expanded="true"] + .sub-item {
        display: block;
        visibility: visible;
    }
    .sub-item button a {
        color: var(--color-nav-sub-link);
        font-weight: lighter;
    }
    .sub-item button:hover > a {
        color: inherit;
    }
    .sub-item button:active > a {
        color: inherit;
    }
	@media (min-width: 768px) {
        nav-item {
            width: 100%;
        }
        button {
            display: grid;
            height: auto;
            grid-template-columns: 20px auto;
            border-bottom: 1px solid var(--color-nav);
        }
        button a {
		    text-align: left;
	    }
        .sub-item button {
            display: grid;
            grid-template-columns: 36px auto;
        }
	}
</style>

<script>
import Utils from "../scripts/utils";

    class NavItem extends HTMLElement {
        constructor() {
            super();

            // TODO: store expand/collapse state in nanostores
          
            const button = this.querySelector('button');
            const svg = this.querySelector('svg')
            const anchor = this.querySelector('a');
            
            const handleClick = (evt : MouseEvent) => {
                if (Utils.getDataAttr(this, "toggle")) {

                    // prevent href navigation / refresh
                    evt.preventDefault();

                    // get and invert the attribute
                    let isExpand = Utils.getDataAttr(this, "expand");
                    isExpand = !isExpand;

                    // set the attribute
                    Utils.setDataAttr(this, "expand", isExpand);
                    Utils.setDataAttr(svg!, "expand", isExpand);
                    Utils.setBoolAttr(button!, "aria-expanded", isExpand);

                } else {
                    // forward click event to anchor tag
				    anchor?.click();
                }
            }

            button!.addEventListener('click', (evt : MouseEvent) => handleClick(evt));
        }
    }

    // Tell the browser to use our NavItem class for <nav-item> elements.
    customElements.define('nav-item', NavItem);
</script>