---
interface Props {
	label: String;
}

const { label } = Astro.props;
---
<button-theme>
    <button>
        <span class="sr-only">Toggle Theme</span>
        <span>{label}</span>
    </button>
</button-theme>

<style>
	button {
        border: none;
        border-radius: 16px;
		padding: 1em;
		cursor: pointer;
		transition: 0.25s ease;

	}
    button[aria-pressed='false'] {
		background-color: goldenrod;
	}
    button[aria-pressed='true'] {
		background-color: purple;
	}
    button:hover {
        color: var(--button-active);
		background-color: var(--gray-dark);
	}
</style>

<script>
    import { setThemeDark, themeDark } from '../scripts/theme.js'
    class ButtonTheme extends HTMLElement {
        constructor() {
            super();

            // get the button HTML element
            const buttonTheme = this.querySelector('button');

            // initialize the button
            setThemeDark();
            let dark = themeDark.get();
            buttonTheme!.setAttribute('aria-pressed', String(dark));

            buttonTheme!.addEventListener('click', () => handleClick());
            
            const handleClick = () => {
                // set the state to be read by other components
                themeDark.set(!themeDark.get());
                
                // add/remove class
                setThemeDark();
                let dark = themeDark.get();
                buttonTheme!.setAttribute('aria-pressed', String(dark));
            }
        }
    }

    // Tell the browser to use our ButtonTheme class for <button-theme> elements.
    customElements.define('button-theme', ButtonTheme);
    document.addEventListener('astro:after-swap', setThemeDark);
</script>