---
interface Props {
	label: String;
}

const { label } = Astro.props;
---
<button-theme>
    <button>
        <span class="sr-only">Toggle Theme</span>
        <span>{label}</span>
    </button>
</button-theme>

<style>
	button {
        border: none;
        border-radius: 16px;
		/*padding: 1em;*/
		cursor: pointer;
		transition: 0.25s ease;

	}
    button[aria-pressed='false'] {
		background-color: goldenrod;
	}
    button[aria-pressed='true'] {
		background-color: purple;
	}
    button:hover {
        color: var(--button-active);
		background-color: var(--gray-dark);
	}
</style>

<script>
    import { $themeDark } from '../scripts/stores/theme.js'
    
    class ButtonTheme extends HTMLElement {

        button : HTMLButtonElement | null;

        constructor() {
            super(); 
            this.button = this.querySelector('button');
            this.button?.addEventListener('click', this.handleClick);
            this.setButtonTheme();
        }

        handleClick = () => {
            $themeDark.set(!$themeDark.get());
            this.setButtonTheme();
        }

        setButtonTheme = () => {
            this.button?.setAttribute('aria-pressed', String($themeDark.get()));
        }
    }

    // Tell the browser to use our ButtonTheme class for <button-theme> elements.
    customElements.define('button-theme', ButtonTheme);

</script>