---
import { Icon } from 'astro-icon/components'
---
<button-theme>
    <span class="sr-only">Toggle Theme</span>
    <button>
        <Icon name="moon-duotone" />
        <Icon name="sun-duotone" />
    </button>
</button-theme>

<style>

    /* MOBILE */
    button-theme {
        display: flex;
        flex-direction: inherit;

        button {
            overflow: hidden;
            padding: 0.5em;
            width: var(--nav-wh);
            height: var(--nav-wh);
            cursor: pointer;
            border-left: 1px solid var(--color-nav-rgba);
            color: var(--color-nav-label);
            background-color: var(--color-nav-item);
        }
        button:hover {
            color: var(--color-secondary);
        }
        svg {
            width: 100%;
            height: 100%;
            transition: all 0.25s ease;
            transition-property: color, opacity;
        }
        [data-icon="moon-duotone"] {
            margin-top: 1px; /* minor */
        }
    } /* button theme */

    /* DESKTOP */
	@media (min-width: 768px) {
        button {
            display: flex;
            border: none;
            border-radius: 40%;
        }
    }
</style>

<script>
    import { $themeDark } from '../scripts/stores/theme.js'

    class ButtonTheme extends HTMLElement {
        button : HTMLButtonElement | null;
        svg0: SVGSVGElement | null;
        svg1: SVGSVGElement | null;
        constructor() {
            super();
            
            this.button = this.querySelector('button');
            this.button?.addEventListener('click', this.handleClick);
            
            let svgs = this.querySelectorAll('svg');
            this.svg0 = svgs[0];
            this.svg1 = svgs[1];

            this.setButtonTheme();
        }

        handleClick = () => {
            $themeDark.set(!$themeDark.get());
            this.setButtonTheme();
        }

        setButtonTheme = () => {
            let dark = $themeDark.get();
            if (this.button) {
                this.button.setAttribute('aria-pressed', String(dark));
            }

            // if svg is hidden, also remove it from document flow using absolute positioning
            let styleVisible = 'opacity: 1; width: 100%; height: 100%;'
            let styleHidden = 'opacity: 0; width: 0; height: 0;'
            styleHidden = styleHidden + ' position: absolute;'

            if (dark) {
                this.svg0?.setAttribute('style', styleVisible)
                this.svg1?.setAttribute('style', styleHidden)
            } else {
                this.svg0?.setAttribute('style', styleHidden)
                this.svg1?.setAttribute('style', styleVisible)
            }
        }
    }

    // Tell the browser to use our ButtonTheme class for <button-theme> elements.
    customElements.define('button-theme', ButtonTheme);

</script>